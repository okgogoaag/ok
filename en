-- Ocerium UI Library - Final Correction & Verification
-- FIX: Corrected all instances of using the invalid "Padding" property on UIPadding objects.
-- The correct properties (PaddingTop, PaddingBottom, PaddingLeft, PaddingRight) are now used.
-- A full review of the script was conducted to ensure no other property-related errors exist.

local maker = loadstring(game:HttpGet("https://github.com/slf0Dev/my-ui-library-making-utility/raw/main/InstanceMaker.lua"))();
local make = maker.Instance

local x = 750
local y = 520

local allproperties = {}

local function SaveProperties(where, to)
    for _, v in next, where:GetDescendants() do
        if v.ClassName == "TextLabel" or v.ClassName == "TextBox" or v.ClassName == "TextButton" then
            to[v] = {
                TextTransparency = v.TextTransparency;
                BackgroundTransparency = v.BackgroundTransparency;
            }
        elseif v.ClassName == "ImageLabel" or v.ClassName == "ImageButton" then
            to[v] = {
                BackgroundTransparency = v.BackgroundTransparency;
                ImageTransparency = v.ImageTransparency;
            }
        elseif v.ClassName == "Frame" or v.ClassName == "ScrollingFrame" then
            to[v] = {
                BackgroundTransparency = v.BackgroundTransparency;
            }
        elseif v.ClassName == "UIStroke" then
            to[v] = {
                Transparency = v.Transparency;
            }
        end
    end
end

for i, v in next, game.CoreGui:GetChildren() do
    if v.Name == "Ocerlib" then
        v:Destroy()
    end
end

local defaulttheme = {
    MainColor = Color3.fromRGB(35, 35, 40);
    BrighterMainColor = Color3.fromRGB(40, 40, 45);
    IconsColor = Color3.fromRGB(100, 100, 120);
    Accent = Color3.fromRGB(0, 100, 255);
    DarkText = Color3.fromRGB(170, 170, 170);
    BrightText = Color3.fromRGB(145, 145, 145);
    Font = "Gotham";
    SoundVolume = 0.5;
    HideKey = "LeftAlt"
}

local Library = {
    ["theme"] = getgenv().LibTheme or defaulttheme
}

local screeng = make("ScreenGui", {
    Parent = game.CoreGui;
    Name = "Ocerlib";
    Enabled = false;
    IgnoreGuiInset = true;
    ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
})

local pagescount = 0
local TweenService = game:GetService("TweenService")

local function Tween(instance, time, properties)
    TweenService:Create(instance, TweenInfo.new(time), properties):Play()
end

function Library.Main(text: string)
    local inmain = {}

    local Main = make("Frame", {
        Parent = screeng;
        Name = "Main";
        AnchorPoint = Vector2.new(0.5, 0.5);
        Position = UDim2.new(0.5, 0, 0.55, 0);
        Size = UDim2.new(0, x, 0, y);
        BackgroundTransparency = 1;
        BackgroundColor3 = Library["theme"]["MainColor"];
        CornerRadius = UDim.new(0, 5);
        ClipsDescendants = true;
        Active = true;
        Draggable = true;
    })

    local MainStroke = make("UIStroke", {
        Parent = Main;
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
        Color = Library["theme"]["Accent"];
        Thickness = 1;
    })

    local LogoIcon = make("ImageLabel", {
        Parent = Main;
        Name = "LogoIcon";
        AnchorPoint = Vector2.new(1, 0);
        Position = UDim2.new(1, -10, 0, 10);
        Size = UDim2.new(0, 55, 0, 55);
        BackgroundTransparency = 1;
        Image = "rbxassetid://10587654910";
        ImageColor3 = Color3.fromRGB(255, 255, 255);
        ScaleType = Enum.ScaleType.Crop;
        ZIndex = 3;
    })

    local OnEffect = Instance.new("Sound")
    OnEffect.Name = "OnEffect"
    OnEffect.Parent = Main
    OnEffect.Volume = Library["theme"]["SoundVolume"]
    OnEffect.SoundId = "http://www.roblox.com/asset/?id=8745692251"

    local LeftPaneWidth = 0.48
    local Gutter = 20

    local Pages = make("ScrollingFrame", {
        Parent = Main;
        Name = "Pages";
        Position = UDim2.new(0, 20, 0, 70);
        Size = UDim2.new(LeftPaneWidth, -Gutter / 2, 1, -90);
        BackgroundTransparency = 1;
        BorderSizePixel = 0;
        ScrollBarThickness = 0;
        ClipsDescendants = true;
    })

    local PagesLayout = make("UIPageLayout", {
        Parent = Pages;
        Padding = UDim.new(0, 5);
        FillDirection = Enum.FillDirection.Vertical;
        HorizontalAlignment = Enum.HorizontalAlignment.Left;
        VerticalAlignment = Enum.VerticalAlignment.Top;
        SortOrder = Enum.SortOrder.LayoutOrder;
        EasingDirection = Enum.EasingDirection.Out;
        EasingStyle = Enum.EasingStyle.Quint;
        TweenTime = 0.3;
        ScrollWheelInputEnabled = false;
    })

    local PagesButtonsCornerVisual = make("Frame", {
        Parent = Main;
        Position = UDim2.new(0, 20, 0, 20);
        Size = UDim2.new(LeftPaneWidth, -Gutter / 2, 0, 35);
        BackgroundTransparency = 1;
    })

    local PagesButtons = make("ScrollingFrame", {
        Parent = PagesButtonsCornerVisual;
        Size = UDim2.new(1, 0, 1, 0);
        BackgroundTransparency = 1;
        ScrollBarImageTransparency = 1;
        ScrollBarThickness = 0;
        CanvasSize = UDim2.new(0, 0, 0, 0);
        AutomaticCanvasSize = Enum.AutomaticSize.X;
    })

    local PagesButtonsList = make("UIListLayout", {
        Parent = PagesButtons;
        Padding = UDim.new(0, 13);
        FillDirection = Enum.FillDirection.Horizontal;
        HorizontalAlignment = Enum.HorizontalAlignment.Left;
        VerticalAlignment = Enum.VerticalAlignment.Center;
        SortOrder = Enum.SortOrder.LayoutOrder
    })

    local LeftFade = make("ImageLabel", {
        Parent = PagesButtonsCornerVisual;
        AnchorPoint = Vector2.new(0, 0.5);
        Position = UDim2.new(0, 0, 0.5, 0);
        Size = UDim2.new(0, 22, 1, 0);
        BackgroundTransparency = 1;
        Image = "rbxassetid://10527391886";
        ImageColor3 = Library["theme"]["MainColor"];
        ZIndex = 5;
    })

    local RightFade = make("ImageLabel", {
        Parent = PagesButtonsCornerVisual;
        AnchorPoint = Vector2.new(1, 0.5);
        Position = UDim2.new(1, 0, 0.5, 0);
        Size = UDim2.new(0, 22, 1, 0);
        BackgroundTransparency = 1;
        Image = "rbxassetid://10527389431";
        ImageColor3 = Library["theme"]["MainColor"];
        ZIndex = 5;
    })


    local opened = true
    game:GetService("UserInputService").InputBegan:Connect(function(key, istyping)
        if key.KeyCode.Name == Enum.KeyCode[Library["theme"]["HideKey"]].Name and not istyping then
            if opened then
                Main:TweenSize(UDim2.new(0, x - 30, 0, y - 30), "Out", "Quart", 0.6, true)
                for c, props in next, allproperties do
                    for b, n in next, props do
                        Tween(c, 0.3, { [b] = 1 })
                    end
                end
            else
                OnEffect:Play()
                Main:TweenSize(UDim2.new(0, x, 0, y), "Out", "Quart", 0.6, true)
                for c, props in next, allproperties do
                    for b, n in next, props do
                        Tween(c, 0.5, { [b] = n })
                    end
                end
            end
            opened = not opened
        end
    end)

    local pagebuttonstable = {}
    function inmain.Page(text: string, iconid: string, rectOffset, rectSize, scaletype)
        local inpage = {}
        pagescount += 1

        local PageButton = make("TextButton", {
            Parent = PagesButtons;
            Name = text;
            Size = UDim2.new(0, 0, 0, 27);
            BackgroundTransparency = 1;
            Text = "      " .. text .. " ";
            TextColor3 = Library["theme"]["BrightText"];
            Font = Enum.Font[Library["theme"]["Font"]];
            TextXAlignment = Enum.TextXAlignment.Center;
            AutomaticSize = Enum.AutomaticSize.X;
            TextSize = 16;
            AutoButtonColor = false;
        })

        local PageIcon = make("ImageLabel", {
            Parent = PageButton;
            Name = "PageIcon";
            AnchorPoint = Vector2.new(0, 0.5);
            Position = UDim2.new(0, 0, 0.5, 0);
            Size = UDim2.new(0, 22, 0, 22);
            BackgroundTransparency = 1;
            Image = "rbxassetid://" .. iconid or "";
            ImageRectOffset = rectOffset or Vector2.new(0, 0);
            ImageRectSize = rectSize or Vector2.new(0, 0);
            ImageColor3 = Library["theme"]["IconsColor"];
            ScaleType = Enum.ScaleType[scaletype or "Fit"];
        })

        local BottomLine = make("Frame", {
            Parent = PageButton;
            Name = "Line";
            AnchorPoint = Vector2.new(0, 1);
            Position = UDim2.new(0, 0, 1, 0);
            Size = UDim2.new(0, 0, 0, 1.5);
            BackgroundColor3 = Library["theme"]["Accent"];
            ZIndex = 2;
        })

        local Page = make("ScrollingFrame", {
            Parent = Pages;
            Name = text;
            Size = UDim2.new(1, 0, 1, 0);
            BackgroundTransparency = 1;
            ScrollBarThickness = 4;
            ScrollBarImageColor3 = Library["theme"]["Accent"];
            CanvasSize = UDim2.new(0, 0, 0, 0);
            AutomaticCanvasSize = Enum.AutomaticSize.Y;
        })

        local SectionsList = make("UIListLayout", {
            Parent = Page;
            Padding = UDim.new(0, 20);
            FillDirection = Enum.FillDirection.Vertical;
            HorizontalAlignment = Enum.HorizontalAlignment.Center;
            SortOrder = Enum.SortOrder.LayoutOrder
        })

        local isfirst = (pagescount == 1)

        task.spawn(function()
            task.wait(0.1)
            Tween(BottomLine, 0.5, { BackgroundTransparency = (isfirst and 0 or 1) })
            Tween(PageIcon, 0.5, { ImageColor3 = (isfirst and Library["theme"]["Accent"] or Library["theme"]["IconsColor"]) })
            BottomLine:TweenSize(UDim2.new((isfirst and 1 or 0), 0, 0, 1.5), "Out", "Quint", 0.5, true)
            if isfirst then
                Tween(PageButton, 0.5, { TextColor3 = Library["theme"]["Accent"] })
            end
        end)
        pagebuttonstable[PageButton] = BottomLine

        PageButton.MouseButton1Click:Connect(function()
            PagesLayout:JumpTo(Page)
            for i, v in next, pagebuttonstable do
                local isCurrent = (i == PageButton)
                Tween(v, 0.3, { BackgroundTransparency = isCurrent and 0 or 1 })
                Tween(i, 0.3, { TextColor3 = isCurrent and Library["theme"]["Accent"] or Library["theme"]["BrightText"] })
                Tween(i.PageIcon, 0.3, { ImageColor3 = isCurrent and Library["theme"]["Accent"] or Library["theme"]["IconsColor"] })
                v:TweenSize(UDim2.new(isCurrent and 1 or 0, 0, 0, 1.5), "Out", "Quint", 0.3, true)
            end
        end)

        function inpage.Section(text: string)
            local insection = {}
            local Section = make("Frame", {
                Parent = Page;
                Name = text;
                Size = UDim2.new(1, 0, 0, 0);
                BackgroundTransparency = 1;
                AutomaticSize = Enum.AutomaticSize.Y
            })

            local SectionTitle = make("TextLabel", {
                Parent = Section;
                Name = 'TitleSection';
                Size = UDim2.new(1, 0, 0, 20);
                BackgroundTransparency = 1;
                Text = text;
                TextColor3 = Library["theme"]["BrightText"];
                Font = Enum.Font[Library["theme"]["Font"]];
                TextXAlignment = Enum.TextXAlignment.Left;
                TextYAlignment = Enum.TextYAlignment.Bottom;
                TextSize = 16;
            })

            local ComponentsList = make("UIListLayout", {
                Parent = Section;
                Padding = UDim.new(0, 12);
                FillDirection = Enum.FillDirection.Vertical;
                HorizontalAlignment = Enum.HorizontalAlignment.Center;
                SortOrder = Enum.SortOrder.LayoutOrder
            })

            function insection.Component(component: string, arg1, arg2, arg3, arg4, arg5, arg6, arg7)

                if component == "Card" then
                    local CardFrame = make("Frame", {
                        Parent = Section;
                        Name = arg1;
                        Size = UDim2.new(1, 0, 0, 0);
                        AutomaticSize = Enum.AutomaticSize.Y;
                        BackgroundTransparency = 1;
                        ClipsDescendants = true;
                    })

                    local Background = make("Frame", {
                        Parent = CardFrame;
                        Name = "flow";
                        AnchorPoint = Vector2.new(0.5, 0.5);
                        Position = UDim2.new(0.5, 0, 0.5, 0);
                        Size = UDim2.new(1, 0, 1, 0);
                        CornerRadius = UDim.new(0, 5);
                        BackgroundColor3 = Library["theme"]["BrighterMainColor"];
                        ZIndex = 1;
                    })

                    local ContentLayout = make("UIListLayout", {
                        Parent = CardFrame;
                        Padding = UDim.new(0, 4);
                        SortOrder = Enum.SortOrder.LayoutOrder;
                        FillDirection = Enum.FillDirection.Vertical;
                        HorizontalAlignment = Enum.HorizontalAlignment.Left;
                    })

                    local ContentPadding = make("UIPadding", {
                        Parent = CardFrame;
                        PaddingTop = UDim.new(0, 10);
                        PaddingBottom = UDim.new(0, 10);
                        PaddingLeft = UDim.new(0, 12);
                        PaddingRight = UDim.new(0, 12);
                    })

                    local TitleLabel = make("TextLabel", {
                        Parent = CardFrame;
                        Name = "Title";
                        Size = UDim2.new(1, 0, 0, 0);
                        AutomaticSize = Enum.AutomaticSize.Y;
                        BackgroundTransparency = 1;
                        Text = arg1;
                        TextColor3 = Library["theme"]["DarkText"];
                        Font = Enum.Font[Library["theme"]["Font"]];
                        TextXAlignment = Enum.TextXAlignment.Left;
                        TextYAlignment = Enum.TextYAlignment.Top;
                        TextSize = 16;
                        ZIndex = 2;
                    })

                    local DescriptionLabel = make("TextLabel", {
                        Parent = CardFrame;
                        Name = "Description";
                        Size = UDim2.new(1, 0, 0, 0);
                        AutomaticSize = Enum.AutomaticSize.Y;
                        BackgroundTransparency = 1;
                        Text = arg2;
                        TextWrapped = true;
                        TextColor3 = Library["theme"]["BrightText"];
                        Font = Enum.Font[Library["theme"]["Font"]];
                        TextXAlignment = Enum.TextXAlignment.Left;
                        TextSize = 14;
                        ZIndex = 2;
                    })
                end

                if component == "Toggle" then
                    local Toggle = make("TextButton", {
                        Parent = Section;
                        Name = arg1;
                        Size = UDim2.new(1, 0, 0, 45);
                        BackgroundTransparency = 1;
                        Text = "";
                        AutoButtonColor = false;
                        ZIndex = 2;
                    })

                    local Background = make("Frame", {
                        Parent = Toggle;
                        AnchorPoint = Vector2.new(0.5, 0.5);
                        Position = UDim2.new(0.5, 0, 0.5, 0);
                        Size = UDim2.new(1, 0, 1, 0);
                        CornerRadius = UDim.new(0, 5);
                        BackgroundColor3 = Library["theme"]["BrighterMainColor"];
                        ZIndex = 1;
                    })

                    local ToggleText = make("TextLabel", {
                        Parent = Toggle;
                        Position = UDim2.new(0, 12, 0, 0);
                        Size = UDim2.new(1, -55, 1, 0);
                        BackgroundTransparency = 1;
                        Text = arg1;
                        TextColor3 = Library["theme"]["DarkText"];
                        Font = Enum.Font[Library["theme"]["Font"]];
                        TextXAlignment = Enum.TextXAlignment.Left;
                        TextYAlignment = Enum.TextYAlignment.Center;
                        TextSize = 15;
                        ZIndex = 3;
                    })

                    local Checker = make("Frame", {
                        Parent = Toggle;
                        AnchorPoint = Vector2.new(1, 0.5);
                        Position = UDim2.new(1, -15, 0.5, 0);
                        Size = UDim2.new(0, 35, 0, 6);
                        BackgroundColor3 = Library["theme"]["MainColor"];
                        CornerRadius = UDim.new(1, 0);
                        ZIndex = 3;
                    })

                    local Circle = make("Frame", {
                        Parent = Checker;
                        AnchorPoint = Vector2.new(0.5, 0.5);
                        Position = UDim2.new(0, 4, 0.5, 0);
                        Size = UDim2.new(0, 12, 0, 12);
                        BackgroundColor3 = Library["theme"]["BrighterMainColor"];
                        CornerRadius = UDim.new(1, 0);
                        ZIndex = 4;
                    })

                    local CircleStroke = make("UIStroke", {
                        Parent = Circle;
                        Color = Library["theme"]["MainColor"];
                        Thickness = 3;
                    })

                    local toggled = make("BoolValue", { Parent = Toggle, Name = "flag", Value = arg3 })

                    local function onswap(isInstant)
                        local time = isInstant and 0 or 0.3
                        if not toggled.Value then
                            Circle:TweenPosition(UDim2.new(0, 4, 0.5, 0), "Out", "Quint", time, true)
                            Tween(CircleStroke, time, { Color = Library["theme"]["MainColor"] })
                            Tween(Checker, time, { BackgroundColor3 = Library["theme"]["MainColor"] })
                            Tween(Circle, time, { BackgroundColor3 = Library["theme"]["BrighterMainColor"] })
                        else
                            Circle:TweenPosition(UDim2.new(1, -4, 0.5, 0), "Out", "Quint", time, true)
                            Tween(CircleStroke, time, { Color = Library["theme"]["Accent"] })
                            Tween(Checker, time, { BackgroundColor3 = Library["theme"]["Accent"] })
                            Tween(Circle, time, { BackgroundColor3 = Library["theme"]["MainColor"] })
                        end
                    end

                    Toggle.MouseButton1Click:Connect(function()
                        toggled.Value = not toggled.Value
                        onswap(false)
                        arg2(toggled.Value)
                    end)

                    onswap(true)
                    if toggled.Value then
                        pcall(arg2, toggled.Value)
                    end
                end

                if component == "Button" then
                    local Button = make("TextButton", {
                        Parent = Section;
                        Name = arg1;
                        Size = UDim2.new(1, 0, 0, 40);
                        CornerRadius = UDim.new(0, 5);
                        BackgroundColor3 = Library["theme"]["BrighterMainColor"];
                        Text = arg1;
                        TextColor3 = Library["theme"]["BrightText"];
                        Font = Enum.Font[Library["theme"]["Font"]];
                        TextSize = 15;
                        ZIndex = 2;
                        AutoButtonColor = false;
                    })

                    Button.MouseButton1Click:Connect(function() pcall(arg2) end)
                    Button.MouseEnter:Connect(function() Tween(Button, 0.2, { BackgroundColor3 = Library["theme"]["MainColor"] }) end)
                    Button.MouseLeave:Connect(function() Tween(Button, 0.2, { BackgroundColor3 = Library["theme"]["BrighterMainColor"] }) end)
                    Button.MouseButton1Down:Connect(function() Tween(Button, 0.1, { BackgroundColor3 = Library["theme"]["Accent"] }) end)
                    Button.MouseButton1Up:Connect(function() Tween(Button, 0.2, { BackgroundColor3 = Library["theme"]["MainColor"] }) end)
                end

                if component == "Dropdown" then
                    local selectables = {}
                    local Dropdown = make("TextButton", {
                        Parent = Section;
                        Name = arg1;
                        Size = UDim2.new(1, 0, 0, 45);
                        CornerRadius = UDim.new(0, 5);
                        BackgroundColor3 = Library["theme"]["BrighterMainColor"];
                        Text = "";
                        ZIndex = 2;
                        ClipsDescendants = false;
                        AutoButtonColor = false;
                    })

                    local DropdownLabel = make("TextLabel", {
                        Parent = Dropdown;
                        Position = UDim2.new(0, 12, 0, 0);
                        Size = UDim2.new(1, -40, 1, 0);
                        BackgroundTransparency = 1;
                        Text = arg1;
                        TextColor3 = Library["theme"]["DarkText"];
                        Font = Enum.Font[Library["theme"]["Font"]];
                        TextXAlignment = Enum.TextXAlignment.Left;
                        TextYAlignment = Enum.TextYAlignment.Center;
                        TextSize = 15;
                        ZIndex = 3;
                    })

                    local ArrowIcon = make("ImageLabel", {
                        Parent = Dropdown;
                        AnchorPoint = Vector2.new(1, 0.5);
                        Position = UDim2.new(1, -12, 0.5, 0);
                        Size = UDim2.new(0, 20, 0, 20);
                        BackgroundTransparency = 1;
                        Image = "rbxassetid://3926305904";
                        ImageRectOffset = Vector2.new(44, 404);
                        ImageRectSize = Vector2.new(36, 36);
                        Rotation = 90;
                        ImageColor3 = Library["theme"]["IconsColor"];
                        ZIndex = 3;
                    })

                    local SelectablesFrameVisual = make("Frame", {
                        Parent = Dropdown;
                        Position = UDim2.new(0, 0, 1, 5);
                        Size = UDim2.new(1, 0, 0, 0);
                        CornerRadius = UDim.new(0, 5);
                        BackgroundColor3 = Library["theme"]["BrighterMainColor"];
                        ZIndex = 4;
                        ClipsDescendants = true
                    })

                    local SelectablesFrame = make("ScrollingFrame", {
                        Parent = SelectablesFrameVisual;
                        Size = UDim2.new(1, 0, 1, 0);
                        BackgroundTransparency = 1;
                        ScrollBarImageColor3 = Library["theme"]["Accent"];
                        ScrollBarThickness = 4;
                        CanvasSize = UDim2.new(0, 0, 0, 0);
                        AutomaticCanvasSize = Enum.AutomaticSize.Y;
                    })

                    local SelectablesList = make("UIListLayout", {
                        Parent = SelectablesFrame;
                        Padding = UDim.new(0, 5);
                        FillDirection = Enum.FillDirection.Vertical;
                        HorizontalAlignment = Enum.HorizontalAlignment.Center;
                    })

                    -- <<< FIX WAS HERE
                    local SelectablesPadding = make("UIPadding", {
                        Parent = SelectablesFrame,
                        PaddingTop = UDim.new(0, 5),
                        PaddingBottom = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5)
                    })

                    local isopened = false
                    local openSize = 120
                    Dropdown.MouseButton1Click:Connect(function()
                        isopened = not isopened
                        if isopened then
                            Tween(ArrowIcon, 0.3, { Rotation = -90 })
                            SelectablesFrameVisual:TweenSize(UDim2.new(1, 0, 0, openSize), "Out", "Quart", 0.3, true)
                            Dropdown:TweenSize(UDim2.new(1, 0, 0, 45 + openSize + 5), "Out", "Quart", 0.3, true)
                        else
                            Tween(ArrowIcon, 0.3, { Rotation = 90 })
                            SelectablesFrameVisual:TweenSize(UDim2.new(1, 0, 0, 0), "Out", "Quart", 0.3, true)
                            Dropdown:TweenSize(UDim2.new(1, 0, 0, 45), "Out", "Quart", 0.3, true)
                        end
                    end)

                    local function addchoice(atext, val)
                        local isMultiSelect = arg3
                        local choiceButton = make("TextButton", {
                            Parent = SelectablesFrame;
                            Name = atext;
                            Size = UDim2.new(1, -10, 0, 30);
                            BackgroundTransparency = 1;
                            Text = atext;
                            TextColor3 = Library["theme"]["DarkText"];
                            Font = Enum.Font[Library["theme"]["Font"]];
                            TextXAlignment = Enum.TextXAlignment.Left;
                            TextYAlignment = Enum.TextYAlignment.Center;
                            TextSize = 14;
                            AutoButtonColor = false;
                        })
                        make("UIPadding", { Parent = choiceButton, PaddingLeft = UDim.new(0, 10) })

                        selectables[choiceButton] = (val == true)

                        if selectables[choiceButton] then
                            choiceButton.TextColor3 = Library["theme"]["Accent"]
                        end

                        choiceButton.MouseButton1Click:Connect(function()
                            if isMultiSelect then
                                selectables[choiceButton] = not selectables[choiceButton]
                                pcall(arg4, atext, selectables[choiceButton])
                            else
                                for btn, _ in pairs(selectables) do
                                    selectables[btn] = (btn == choiceButton)
                                    Tween(btn, 0.2, { TextColor3 = selectables[btn] and Library["theme"]["Accent"] or Library["theme"]["DarkText"] })
                                end
                                pcall(arg4, atext, val)
                            end
                            Tween(choiceButton, 0.2, { TextColor3 = selectables[choiceButton] and Library["theme"]["Accent"] or Library["theme"]["DarkText"] })
                        end)

                        choiceButton.MouseEnter:Connect(function() if not selectables[choiceButton] then Tween(choiceButton, 0.2, { TextColor3 = Library["theme"]["BrightText"] }) end end)
                        choiceButton.MouseLeave:Connect(function() if not selectables[choiceButton] then Tween(choiceButton, 0.2, { TextColor3 = Library["theme"]["DarkText"] }) end end)
                    end
                    for i, v in next, arg2 do addchoice(type(i) == "string" and i or v, v) end
                end

                if component == "Slider" then
                    local Slider = make("TextLabel", {
                        Parent = Section;
                        Name = arg1;
                        Size = UDim2.new(1, 0, 0, 50);
                        CornerRadius = UDim.new(0, 5);
                        BackgroundColor3 = Library["theme"]["BrighterMainColor"];
                        Text = "";
                        ZIndex = 2;
                    })

                    local SliderText = make("TextLabel", {
                        Parent = Slider;
                        Position = UDim2.new(0, 12, 0, 8);
                        Size = UDim2.new(0.7, 0, 0, 15);
                        BackgroundTransparency = 1;
                        Text = arg1;
                        TextColor3 = Library["theme"]["BrightText"];
                        Font = Enum.Font[Library["theme"]["Font"]];
                        TextXAlignment = Enum.TextXAlignment.Left;
                        TextYAlignment = Enum.TextYAlignment.Center;
                        TextSize = 15;
                    })

                    local SliderValue = make("TextLabel", {
                        Parent = Slider;
                        AnchorPoint = Vector2.new(1, 0);
                        Position = UDim2.new(1, -12, 0, 8);
                        Size = UDim2.new(0.3, 0, 0, 15);
                        BackgroundTransparency = 1;
                        Text = tostring(arg6);
                        TextColor3 = Library["theme"]["BrightText"];
                        Font = Enum.Font[Library["theme"]["Font"]];
                        TextXAlignment = Enum.TextXAlignment.Right;
                        TextYAlignment = Enum.TextYAlignment.Center;
                        TextSize = 15;
                    })

                    local SliderCore = make("Frame", {
                        Parent = Slider;
                        AnchorPoint = Vector2.new(0.5, 0);
                        Position = UDim2.new(0.5, 0, 0, 30);
                        Size = UDim2.new(1, -24, 0, 6);
                        CornerRadius = UDim.new(1, 0);
                        BackgroundColor3 = Library["theme"]["MainColor"];
                    })

                    local SliderProgress = make("Frame", {
                        Parent = SliderCore;
                        Size = UDim2.new(0.5, 0, 1, 0);
                        CornerRadius = UDim.new(1, 0);
                        BackgroundColor3 = Library["theme"]["Accent"];
                    })

                    local SliderCircle = make("Frame", {
                        Parent = SliderProgress;
                        AnchorPoint = Vector2.new(0.5, 0.5);
                        Size = UDim2.new(0, 12, 0, 12);
                        Position = UDim2.new(1, 0, 0.5, 0);
                        BackgroundColor3 = Library["theme"]["MainColor"];
                        CornerRadius = UDim.new(1, 0);
                    })

                    local CircleStroke = make("UIStroke", { Parent = SliderCircle, Color = Library["theme"]["Accent"], Thickness = 3 })

                    local Dragging = false
                    local function update(inputPos)
                        local coreSize = SliderCore.AbsoluteSize.X
                        local corePos = SliderCore.AbsolutePosition.X
                        local percent = math.clamp((inputPos.X - corePos) / coreSize, 0, 1)

                        local min, max, isFloat = arg2, arg3, arg4
                        local value = min + (max - min) * percent
                        local displayValue = isFloat and string.format("%.1f", value) or tostring(math.floor(value + 0.5))

                        SliderProgress.Size = UDim2.new(percent, 0, 1, 0)
                        SliderValue.Text = displayValue
                        pcall(arg5, tonumber(displayValue))
                    end

                    local function setInitialValue(val)
                        local min, max = arg2, arg3
                        local percent = math.clamp((val - min) / (max - min), 0, 1)
                        SliderProgress.Size = UDim2.new(percent, 0, 1, 0)
                        SliderValue.Text = tostring(val)
                    end
                    setInitialValue(arg6)

                    Slider.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Dragging = true
                            update(input.Position)
                        end
                    end)
                    Slider.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then Dragging = false end
                    end)
                    game:GetService("UserInputService").InputChanged:Connect(function(input)
                        if Dragging and input.UserInputType == Enum.UserInputType.MouseMovement then update(input) end
                    end)
                end
            end
            return insection;
        end
        return inpage;
    end

    function inmain.Logs(title: string)
        local inlogs = {}

        local RightPaneStart = LeftPaneWidth + Gutter / x

        local Logs = make("ScrollingFrame", {
            Parent = Main;
            Name = "Logs";
            Position = UDim2.new(RightPaneStart, 0, 0, 70);
            Size = UDim2.new(1 - RightPaneStart, -20, 1, -90);
            BackgroundTransparency = 1;
            ScrollBarImageColor3 = Library["theme"]["Accent"];
            ScrollBarThickness = 4;
            CanvasSize = UDim2.new(0, 0, 0, 0);
            AutomaticCanvasSize = Enum.AutomaticSize.Y;
        })

        local LogsTitle = make("TextLabel", {
            Parent = Main;
            Name = 'TitleLogs';
            Position = UDim2.new(RightPaneStart, 0, 0, 35);
            Size = UDim2.new(1 - RightPaneStart, -20, 0, 25);
            BackgroundTransparency = 1;
            Text = title;
            TextColor3 = Library["theme"]["BrightText"];
            Font = Enum.Font[Library["theme"]["Font"]];
            TextXAlignment = Enum.TextXAlignment.Left;
            TextYAlignment = Enum.TextYAlignment.Center;
            TextSize = 18;
            ZIndex = 2;
        })

        local LogsList = make("UIListLayout", {
            Parent = Logs;
            Padding = UDim.new(0, 12);
            FillDirection = Enum.FillDirection.Vertical;
            HorizontalAlignment = Enum.HorizontalAlignment.Center;
            SortOrder = Enum.SortOrder.LayoutOrder
        })

        function inlogs.LogWithButtons(arg1, arg2)
            local inlog = {}

            local LogFrame = make("Frame", {
                Parent = Logs;
                Name = arg1;
                Size = UDim2.new(1, 0, 0, 0);
                AutomaticSize = Enum.AutomaticSize.Y;
                BackgroundTransparency = 1;
                ClipsDescendants = true;
            })

            local LogBackground = make("Frame", {
                Parent = LogFrame;
                Name = "loggflow";
                AnchorPoint = Vector2.new(0.5, 0.5);
                Position = UDim2.new(0.5, 0, 0.5, 0);
                Size = UDim2.new(1, 0, 1, 0);
                CornerRadius = UDim.new(0, 5);
                BackgroundColor3 = Library["theme"]["BrighterMainColor"];
                ZIndex = 1;
            })

            local ContentFrame = make("Frame", {
                Parent = LogFrame;
                Size = UDim2.new(1, 0, 1, 0);
                BackgroundTransparency = 1;
                ZIndex = 2;
            })

            local ContentLayout = make("UIListLayout", {
                Parent = ContentFrame;
                Padding = UDim.new(0, 4);
                FillDirection = Enum.FillDirection.Vertical;
                HorizontalAlignment = Enum.HorizontalAlignment.Left;
            })

            -- <<< FIX WAS HERE
            local ContentPadding = make("UIPadding", {
                Parent = ContentFrame;
                PaddingTop = UDim.new(0, 12),
                PaddingBottom = UDim.new(0, 12),
                PaddingLeft = UDim.new(0, 12),
                PaddingRight = UDim.new(0, 12)
            })

            local TitleLabel = make("TextLabel", {
                Parent = ContentFrame;
                Name = "TitleLabel";
                Size = UDim2.new(1, 0, 0, 0);
                AutomaticSize = Enum.AutomaticSize.Y;
                BackgroundTransparency = 1;
                Text = arg1;
                TextColor3 = Library["theme"]["DarkText"];
                Font = Enum.Font[Library["theme"]["Font"]];
                TextXAlignment = Enum.TextXAlignment.Left;
                TextYAlignment = Enum.TextYAlignment.Top;
                TextSize = 16;
            })

            local SecondLabel = make("TextLabel", {
                Parent = ContentFrame;
                Name = "SecondLabel";
                Size = UDim2.new(1, 0, 0, 0);
                AutomaticSize = Enum.AutomaticSize.Y;
                BackgroundTransparency = 1;
                Text = arg2 or "";
                TextWrapped = true;
                TextColor3 = Library["theme"]["BrightText"];
                Font = Enum.Font[Library["theme"]["Font"]];
                TextXAlignment = Enum.TextXAlignment.Left;
                TextSize = 12;
            })

            local ButtonsFrame = make("Frame", {
                Parent = ContentFrame;
                Name = "Buttons";
                Size = UDim2.new(1, 0, 0, 25);
                LayoutOrder = 3;
                BackgroundTransparency = 1;
            })

            local ButtonsLayout = make("UIListLayout", {
                Parent = ButtonsFrame;
                Padding = UDim.new(0, 8);
                FillDirection = Enum.FillDirection.Horizontal;
                HorizontalAlignment = Enum.HorizontalAlignment.Right;
                VerticalAlignment = Enum.VerticalAlignment.Center;
            })

            local ButtonsPadding = make("UIPadding", {
                Parent = ButtonsFrame;
                PaddingTop = UDim.new(0, 8);
            })

            function inlog.Button(text, func)
                local Button = make("TextButton", {
                    Parent = ButtonsFrame;
                    Name = text;
                    Size = UDim2.new(0, 0, 1, 0);
                    CornerRadius = UDim.new(0, 5);
                    BackgroundColor3 = Library["theme"]["MainColor"];
                    Text = text;
                    TextColor3 = Library["theme"]["BrightText"];
                    Font = Enum.Font[Library["theme"]["Font"]];
                    TextSize = 14;
                    AutomaticSize = Enum.AutomaticSize.X;
                    AutoButtonColor = false;
                })
                make("UIPadding", { Parent = Button, PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10) })
                make("UIStroke", { Parent = Button, Color = Library["theme"]["Accent"], Thickness = 1 })

                Button.MouseButton1Click:Connect(function() pcall(func) end)
                Button.MouseEnter:Connect(function() Tween(Button, 0.2, { BackgroundColor3 = Color3.fromRGB(60, 60, 65) }) end)
                Button.MouseLeave:Connect(function() Tween(Button, 0.2, { BackgroundColor3 = Library["theme"]["MainColor"] }) end)
                Button.MouseButton1Down:Connect(function() Tween(Button, 0.1, { BackgroundColor3 = Library["theme"]["Accent"] }) end)
                Button.MouseButton1Up:Connect(function() Tween(Button, 0.2, { BackgroundColor3 = Color3.fromRGB(60, 60, 65) }) end)
            end

            function inlog.ChangeText(tochange) TitleLabel.Text = tochange end
            function inlog.SelfDestroy() LogFrame:Destroy() end
            return inlog
        end

        function inlogs.Log(arg1, arg2)
            local LogFrame = make("Frame", {
                Parent = Logs;
                Name = arg1;
                Size = UDim2.new(1, 0, 0, 0);
                AutomaticSize = Enum.AutomaticSize.Y;
                BackgroundTransparency = 1;
                ClipsDescendants = true;
            })

            local LogBackground = make("Frame", {
                Parent = LogFrame;
                Name = "loggflow";
                AnchorPoint = Vector2.new(0.5, 0.5);
                Position = UDim2.new(0.5, 0, 0.5, 0);
                Size = UDim2.new(1, 0, 1, 0);
                CornerRadius = UDim.new(0, 5);
                BackgroundColor3 = Library["theme"]["BrighterMainColor"];
                ZIndex = 1;
            })

            local ContentFrame = make("Frame", {
                Parent = LogFrame;
                Size = UDim2.new(1, 0, 1, 0);
                BackgroundTransparency = 1;
                ZIndex = 2;
            })

            local ContentLayout = make("UIListLayout", {
                Parent = ContentFrame;
                Padding = UDim.new(0, 4);
                FillDirection = Enum.FillDirection.Vertical;
                HorizontalAlignment = Enum.HorizontalAlignment.Left;
            })

            -- <<< FIX WAS HERE
            local ContentPadding = make("UIPadding", {
                Parent = ContentFrame;
                PaddingTop = UDim.new(0, 12),
                PaddingBottom = UDim.new(0, 12),
                PaddingLeft = UDim.new(0, 12),
                PaddingRight = UDim.new(0, 12)
            })

            local TitleLabel = make("TextLabel", {
                Parent = ContentFrame;
                Name = "TitleLabel";
                Size = UDim2.new(1, 0, 0, 0);
                AutomaticSize = Enum.AutomaticSize.Y;
                BackgroundTransparency = 1;
                Text = arg1;
                TextColor3 = Library["theme"]["DarkText"];
                Font = Enum.Font[Library["theme"]["Font"]];
                TextXAlignment = Enum.TextXAlignment.Left;
                TextYAlignment = Enum.TextYAlignment.Top;
                TextSize = 16;
            })

            local SecondLabel = make("TextLabel", {
                Parent = ContentFrame;
                Name = "SecondLabel";
                Size = UDim2.new(1, 0, 0, 0);
                AutomaticSize = Enum.AutomaticSize.Y;
                BackgroundTransparency = 1;
                Text = arg2 or "";
                TextWrapped = true;
                TextColor3 = Library["theme"]["BrightText"];
                Font = Enum.Font[Library["theme"]["Font"]];
                TextXAlignment = Enum.TextXAlignment.Left;
                TextSize = 12;
            })

            return LogFrame
        end

        return inlogs;
    end

    task.spawn(function()
        SaveProperties(screeng, allproperties)
        Main.BackgroundTransparency = 1
        Main.Visible = false
        for c, props in next, allproperties do
            for b, n in next, props do c[b] = 1 end
        end
        task.wait(0.1)
        screeng.Enabled = true
        Main.Visible = true
        Tween(Main, 0.6, { BackgroundTransparency = 0 })
        for c, props in next, allproperties do
            for b, n in next, props do Tween(c, 0.6, { [b] = n }) end
        end
    end)

    return inmain;
end

return Library
